<?php

/**
 * BaseProductionOrder
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $production_line_id
 * @property integer $product_id
 * @property integer $state_id
 * @property integer $code
 * @property integer $quantity
 * @property integer $start_date
 * @property integer $start_time
 * @property integer $end_date
 * @property integer $end_time
 * @property State $State
 * @property ProductionLine $ProductionLine
 * @property Product $Product
 * @property Doctrine_Collection $ProductionItem
 * 
 * @method integer             getProductionLineId()   Returns the current record's "production_line_id" value
 * @method integer             getProductId()          Returns the current record's "product_id" value
 * @method integer             getStateId()            Returns the current record's "state_id" value
 * @method integer             getCode()               Returns the current record's "code" value
 * @method integer             getQuantity()           Returns the current record's "quantity" value
 * @method integer             getStartDate()          Returns the current record's "start_date" value
 * @method integer             getStartTime()          Returns the current record's "start_time" value
 * @method integer             getEndDate()            Returns the current record's "end_date" value
 * @method integer             getEndTime()            Returns the current record's "end_time" value
 * @method State               getState()              Returns the current record's "State" value
 * @method ProductionLine      getProductionLine()     Returns the current record's "ProductionLine" value
 * @method Product             getProduct()            Returns the current record's "Product" value
 * @method Doctrine_Collection getProductionItem()     Returns the current record's "ProductionItem" collection
 * @method ProductionOrder     setProductionLineId()   Sets the current record's "production_line_id" value
 * @method ProductionOrder     setProductId()          Sets the current record's "product_id" value
 * @method ProductionOrder     setStateId()            Sets the current record's "state_id" value
 * @method ProductionOrder     setCode()               Sets the current record's "code" value
 * @method ProductionOrder     setQuantity()           Sets the current record's "quantity" value
 * @method ProductionOrder     setStartDate()          Sets the current record's "start_date" value
 * @method ProductionOrder     setStartTime()          Sets the current record's "start_time" value
 * @method ProductionOrder     setEndDate()            Sets the current record's "end_date" value
 * @method ProductionOrder     setEndTime()            Sets the current record's "end_time" value
 * @method ProductionOrder     setState()              Sets the current record's "State" value
 * @method ProductionOrder     setProductionLine()     Sets the current record's "ProductionLine" value
 * @method ProductionOrder     setProduct()            Sets the current record's "Product" value
 * @method ProductionOrder     setProductionItem()     Sets the current record's "ProductionItem" collection
 * 
 * @package    eMrp
 * @subpackage model
 * @author     Scoppia
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseProductionOrder extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('production_order');
        $this->hasColumn('production_line_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('product_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('state_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('code', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('quantity', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('start_date', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('start_time', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('end_date', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('end_time', 'integer', null, array(
             'type' => 'integer',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('State', array(
             'local' => 'state_id',
             'foreign' => 'id'));

        $this->hasOne('ProductionLine', array(
             'local' => 'production_line_id',
             'foreign' => 'id'));

        $this->hasOne('Product', array(
             'local' => 'product_id',
             'foreign' => 'id'));

        $this->hasMany('ProductionItem', array(
             'local' => 'id',
             'foreign' => 'production_order_id'));
    }
}